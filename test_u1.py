# Generated by Selenium IDE
# import pytest
import time
import json
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# 配置日志
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TestU1():
    def setup_method(self, method):
        logger.info("初始化Firefox浏览器")
        self.driver = webdriver.Firefox()
        self.vars = {}
    
    def teardown_method(self, method):
        logger.info("关闭浏览器")
        self.driver.quit()
    
    def test_u1(self):
        try:
            logger.info("开始测试")
            self.driver.get("https://www.zhipin.com/guangzhou/?ka=city-sites-101280100")
            logger.info("页面加载完成")
            
            # 设置窗口大小
            self.driver.set_window_size(1721, 1033)
            logger.info("窗口大小设置完成")
            
            # 添加等待时间，便于调试
            time.sleep(2)
            
            # 点击第一个元素
            element1 = self.driver.find_element(By.CSS_SELECTOR, "dl:nth-child(1) b")
            element1.click()
            logger.info("点击了第一个元素")
            
            # 添加调试断点
            breakpoint()  # 可以在这里设置断点
            
            # 点击第二个元素
            element2 = self.driver.find_element(By.CSS_SELECTOR, "dl:nth-child(1) .menu-article")
            element2.click()
            logger.info("点击了第二个元素")
            
            # 点击第三个元素
            element3 = self.driver.find_element(By.CSS_SELECTOR, "dl:nth-child(1) li:nth-child(1) a:nth-child(1)")
            element3.click()
            logger.info("点击了第三个元素")
            
            logger.info("测试完成")
            
        except Exception as e:
            logger.error(f"测试过程中出现错误: {e}")
            raise

def main():
    """主函数，用于调试"""
    logger.info("开始执行主函数")
    
    # 创建测试实例
    test = TestU1()
    
    try:
        # 初始化
        test.setup_method(None)
        
        # 执行测试
        test.test_u1()
        
        # 等待一段时间，便于观察结果
        time.sleep(5)
        
    except Exception as e:
        logger.error(f"执行过程中出现错误: {e}")
    finally:
        # 清理资源
        test.teardown_method(None)
        logger.info("程序执行完毕")

if __name__ == "__main__":
    main()
  
